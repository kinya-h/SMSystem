// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = ?
`

func (q *Queries) DeleteProduct(ctx context.Context, id interface{}) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, description, image, price, rating, category, stock, available FROM products
WHERE id = ?
`

func (q *Queries) GetProduct(ctx context.Context, id interface{}) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Image,
		&i.Price,
		&i.Rating,
		&i.Category,
		&i.Stock,
		&i.Available,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, name, description, image, price, rating, category, stock, available FROM products
ORDER BY name
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Image,
			&i.Price,
			&i.Rating,
			&i.Category,
			&i.Stock,
			&i.Available,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertProduct = `-- name: InsertProduct :execresult
INSERT INTO products (
    name ,description ,image, price,rating , category, stock
) VALUES (
  ?,?,?,?,?,?,?
)
`

type InsertProductParams struct {
	Name        sql.NullString  `json:"name"`
	Description sql.NullString  `json:"description"`
	Image       sql.NullString  `json:"image"`
	Price       sql.NullFloat64 `json:"price"`
	Rating      sql.NullFloat64 `json:"rating"`
	Category    sql.NullString  `json:"category"`
	Stock       sql.NullInt64   `json:"stock"`
}

func (q *Queries) InsertProduct(ctx context.Context, arg InsertProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertProduct,
		arg.Name,
		arg.Description,
		arg.Image,
		arg.Price,
		arg.Rating,
		arg.Category,
		arg.Stock,
	)
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, description, image, price, rating, category, stock, available FROM products
LIMIT 5
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Image,
			&i.Price,
			&i.Rating,
			&i.Category,
			&i.Stock,
			&i.Available,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductAvailability = `-- name: UpdateProductAvailability :execresult
UPDATE products SET available = ? WHERE id  = ?
`

type UpdateProductAvailabilityParams struct {
	Available sql.NullBool `json:"available"`
	ID        interface{}  `json:"id"`
}

func (q *Queries) UpdateProductAvailability(ctx context.Context, arg UpdateProductAvailabilityParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateProductAvailability, arg.Available, arg.ID)
}

const updateProductPrice = `-- name: UpdateProductPrice :execresult
UPDATE products SET price = ? WHERE id  = ?
`

type UpdateProductPriceParams struct {
	Price sql.NullFloat64 `json:"price"`
	ID    interface{}     `json:"id"`
}

func (q *Queries) UpdateProductPrice(ctx context.Context, arg UpdateProductPriceParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateProductPrice, arg.Price, arg.ID)
}

const updateProductRating = `-- name: UpdateProductRating :execresult
UPDATE products SET rating = ? WHERE id  = ?
`

type UpdateProductRatingParams struct {
	Rating sql.NullFloat64 `json:"rating"`
	ID     interface{}     `json:"id"`
}

func (q *Queries) UpdateProductRating(ctx context.Context, arg UpdateProductRatingParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateProductRating, arg.Rating, arg.ID)
}
